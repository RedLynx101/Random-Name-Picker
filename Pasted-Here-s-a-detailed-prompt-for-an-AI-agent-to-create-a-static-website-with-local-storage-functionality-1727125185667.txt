Here’s a detailed prompt for an AI agent to create a static website with local storage functionality that meets your specifications. The site will allow users to enter and manage a list of names, randomly select from that list, track selections, and include reset functionality. It will also be a Progressive Web Application (PWA) to enable offline usage.

---

### Prompt

**Goal:** Create a static website that allows users to input, manage, and randomly select names from a list. The site should:

1. Allow the user to enter names.
2. Enable or disable individual names for selection.
3. Randomly select a name from the enabled list and track who was selected.
4. Keep track of selected names and mark them as "used" so they won’t be selected again unless reset.
5. Store the list of names, their enabled/disabled state, and whether they've been "used" in `localStorage`.
6. Include a "reset" button to clear the "used" status for all names.
7. Function as a Progressive Web Application (PWA) to allow offline usage.

**Requirements:**
- Use only HTML, CSS, and JavaScript.
- Use `localStorage` to store all data (names, enabled/disabled status, and active/used status).
- Implement a simple, user-friendly UI that includes:
  - An input field for adding names.
  - A list showing each name with an enable/disable toggle.
  - A button to randomly select from enabled names.
  - A section to show the selected name.
  - A reset button to re-enable all names for selection.
- Make the website a PWA with offline support (manifest, service worker, etc.).

### Implementation Details:

**1. HTML (index.html)**:
- Structure the page with sections for entering names, displaying the list, showing the selected name, and buttons for random selection and reset.
  
**2. CSS (style.css)**:
- Style the page to be simple and clean, with buttons, toggles, and a list of names.
  
**3. JavaScript (script.js)**:
- Implement logic to:
  - Add, enable, disable, and remove names.
  - Store and retrieve data from `localStorage`.
  - Randomly select from the enabled names.
  - Track and store whether a name has been selected/used.
  - Reset all names to be selectable again.
  
**4. PWA Features**:
- Add a `manifest.json` file for PWA capabilities, including icons and metadata.
- Register a `serviceWorker.js` file to cache assets and allow the app to work offline.

---

### Code Outline:

**HTML (index.html):**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Random Name Picker</title>
    <link rel="stylesheet" href="style.css">
    <link rel="manifest" href="/manifest.json">
</head>
<body>
    <h1>Random Name Picker</h1>

    <div id="name-input">
        <input type="text" id="new-name" placeholder="Enter a name">
        <button id="add-name-btn">Add Name</button>
    </div>

    <h2>List of Names</h2>
    <ul id="name-list"></ul>

    <button id="select-name-btn">Select Random Name</button>
    <p id="selected-name">Selected Name: <span id="selected-name-display">None</span></p>

    <button id="reset-btn">Reset Names</button>

    <script src="script.js"></script>
</body>
</html>
```

**CSS (style.css):**
```css
body {
    font-family: Arial, sans-serif;
    text-align: center;
    margin: 20px;
}

#name-input {
    margin-bottom: 20px;
}

ul {
    list-style-type: none;
    padding: 0;
}

li {
    display: flex;
    justify-content: space-between;
    margin: 5px 0;
}

button {
    margin-top: 10px;
}
```

**JavaScript (script.js):**
```javascript
// Initialize data from localStorage or create new data
let names = JSON.parse(localStorage.getItem('names')) || [];

function renderNames() {
    const nameList = document.getElementById('name-list');
    nameList.innerHTML = '';

    names.forEach((nameObj, index) => {
        const li = document.createElement('li');
        li.innerHTML = `
            ${nameObj.name} 
            <input type="checkbox" ${nameObj.enabled ? 'checked' : ''} onchange="toggleEnabled(${index})">
            <span>${nameObj.used ? '(Used)' : ''}</span>
        `;
        nameList.appendChild(li);
    });
}

function addName() {
    const newName = document.getElementById('new-name').value;
    if (newName) {
        names.push({ name: newName, enabled: true, used: false });
        localStorage.setItem('names', JSON.stringify(names));
        renderNames();
        document.getElementById('new-name').value = '';
    }
}

function toggleEnabled(index) {
    names[index].enabled = !names[index].enabled;
    localStorage.setItem('names', JSON.stringify(names));
    renderNames();
}

function selectRandomName() {
    const enabledNames = names.filter(name => name.enabled && !name.used);
    if (enabledNames.length === 0) {
        alert('No names left to select!');
        return;
    }

    const randomIndex = Math.floor(Math.random() * enabledNames.length);
    const selectedName = enabledNames[randomIndex].name;
    document.getElementById('selected-name-display').textContent = selectedName;

    // Mark the selected name as used
    const nameObj = names.find(n => n.name === selectedName);
    nameObj.used = true;
    localStorage.setItem('names', JSON.stringify(names));
    renderNames();
}

function resetNames() {
    names = names.map(name => ({ ...name, used: false }));
    localStorage.setItem('names', JSON.stringify(names));
    renderNames();
}

document.getElementById('add-name-btn').addEventListener('click', addName);
document.getElementById('select-name-btn').addEventListener('click', selectRandomName);
document.getElementById('reset-btn').addEventListener('click', resetNames);

window.onload = renderNames;
```

**PWA: Manifest (manifest.json):**
```json
{
    "name": "Random Name Picker",
    "short_name": "Name Picker",
    "start_url": "/",
    "display": "standalone",
    "background_color": "#ffffff",
    "theme_color": "#000000",
    "icons": [
        {
            "src": "icon-192x192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "icon-512x512.png",
            "sizes": "512x512",
            "type": "image/png"
        }
    ]
}
```

**PWA: Service Worker (serviceWorker.js):**
```javascript
self.addEventListener('install', event => {
    event.waitUntil(
        caches.open('random-name-picker-v1').then(cache => {
            return cache.addAll([
                '/',
                '/index.html',
                '/style.css',
                '/script.js',
                '/manifest.json',
                '/icon-192x192.png',
                '/icon-512x512.png'
            ]);
        })
    );
});

self.addEventListener('fetch', event => {
    event.respondWith(
        caches.match(event.request).then(response => {
            return response || fetch(event.request);
        })
    );
});
```

---

This prompt specifies how to set up the static website with the necessary features, including local storage and PWA support.